summary(docs)
inspect(docs[2]) #test and inspect a document
library(SnowballC)
#the following code edits the data and removes excess information
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, tolower)
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, stemDocument)
docs <- tm_map(docs, stripWhitespace)
docs <- tm_map(docs, PlainTextDocument)
inspect(docs[2]) #test
#Now Create Matrix
dtm <- DocumentTermMatrix(docs)
m <- as.matrix(dtm)
write.csv(m,file="dtmKMeans.csv")
#Transpose of dtm
tdm <- TermDocumentMatrix(docs)
tdm
normalized_dtm <- quick.norm(dtm,1) #normalize matrix, sum = 1
##EUCLIDEAN MATRIX
stdEuc <- dist((1/normalized_dtm)*(dtm)) #standardize Euclidean Distance
euc <- as.matrix(stdEucl)
euc.sort <- sort(euc, decreasing=TRUE)
kfit <- kmeans(stdEuc, 3, nstart=100)
kfit
cosSim <- cosine(as.matrix(tdm))# Cosine similarity b/w each pair of rows
cos <- as.matrix(cosSim)
cos.sort <- sort(cos, decreasing=TRUE)
kfit <- kmeans(cosSim, 3, nstart=100)
clusplot(cos, kfit$cluster, color=T, shade=T, labels=1, lines=0)
plot(x, y1, type = 'l',col='red', main='Standardized Normal Distribution(X->Z)', xlab = "x", ylab="f(x)")
#Transformation of X --> Z
Z <- (norm_pop - mu_x_bar)/ sigma_x_bar
x <- seq(0,10,length = 200 )
y1 <- dnorm(x, mu_x_bar,sigma_x_bar) #calculate density
plot(x, y1, type = 'l',col='red', main='Standardized Normal Distribution(X->Z)', xlab = "x", ylab="f(x)")
#Transformation of X --> Z
Z <- (norm_pop - mu_x_bar)/ sigma_x_bar
x <- seq(4,14,length = 200 )
y1 <- dnorm(x, mu_x_bar,sigma_x_bar) #calculate density
plot(x, y1, type = 'l',col='red', main='Standardized Normal Distribution(X->Z)', xlab = "x", ylab="f(x)")
x <- seq(0,10,length = 200 )
y1 <- dnorm(x, mu_x_bar,sigma_x_bar) #calculate density
plot(x, y1, type = 'l',col='red', main='Standardized Normal Distribution(X->Z)', xlab = "x", ylab="f(x)")
my_sample <- sample(norm_pop, 10) #estimate
mean(my_sample)
mu_x_bar <- 8
sigma_x_bar <- 0.5
x <- seq(4,12,length = 200 )
y1 <- dnorm(x, mu_x_bar,sigma_x_bar) #calculate density
my_sample <- sample(norm_pop, 10) #estimate
mean(my_sample)
mu_x_bar <- 8
sigma_x_bar <- 0.5
x <- seq(4,12,length = 200 )
y1 <- dnorm(x, mu_x_bar,sigma_x_bar) #calculate density
plot(x, y1, type = 'l',col='red', main='Standardized Normal Distribution(X->Z)', xlab = "x", ylab="f(x)")
x <- seq(4,12,length = 200 )
y1 <- dnorm(x, mu_x_bar,sigma_x_bar) #calculate density
plot(x, y1, type = 'l',col='red', main='PDF', xlab = "x", ylab="f(x)")
x <- seq(5,11,length = 200 )
y1 <- dnorm(x, mu_x_bar,sigma_x_bar) #calculate density
plot(x, y1, type = 'l',col='red', main='PDF', xlab = "x", ylab="f(x)")
x <- seq(6,10,length = 200 )
y1 <- dnorm(x, mu_x_bar,sigma_x_bar) #calculate density
plot(x, y1, type = 'l',col='red', main='PDF', xlab = "x", ylab="f(x)")
x <- seq(5,11,length = 200 )
y1 <- dnorm(x, mu_x_bar,sigma_x_bar) #calculate density
plot(x, y1, type = 'l',col='red', main='PDF', xlab = "x", ylab="f(x)")
#Tran
x <- seq(4,11,length = 200 )
y1 <- dnorm(x, mu_x_bar,sigma_x_bar) #calculate density
plot(x, y1, type = 'l',col='red', main='PDF', xlab = "x", ylab="f(x)")
#T
x <- seq(6,10,length = 200 )
y1 <- dnorm(x, mu_x_bar,sigma_x_bar) #calculate density
plot(x, y1, type = 'l',col='red', main='PDF', xlab = "x", ylab="f(x)")
#Transf
#Shade area under curve
cord.x <- c(6, seq(6,7,.01),7)
cord.y <- c(0,dnorm(seq(6,7,0.01)),0)
curve(x, xlim=c(6,10),main="PDF")
polygon(cord.x,cord.y,col='skyblue')
cord.x <- c(6, seq(6,7,.01),7)
cord.y <- c(0,dnorm(seq(6,7,0.01)),0)
curve(x, xlim=c(6,10),main="PDF")
polygon(cord.x,cord.y,col='skyblue')
f<-function(x){dnorm(x,1.9,0.5)}
plot(f,0,4,xlab="x-axis",ylab="density f(x)")
x<-seq(0,1.4,0.01)
polygon(c(0,x,1.4), c(0,f(x),0), col="lightblue")
x<-seq(0,2.1,0.7)
polygon(c(0,x,2.1), c(0,f(x),0), col="lightblue")
# #######################################
f<-function(x){dnorm(x,1.9,0.5)}
plot(f,0,4,xlab="x-axis",ylab="density f(x)")
x<-seq(0,1.4,0.01)
polygon(c(0,x,1.4), c(0,f(x),0), col="lightblue")
x <- seq(6,10,length = 200 )
y1 <- dnorm(x, mu_x_bar,sigma_x_bar) #calculate density
plot(x, y1, type = 'l',col='black', main='PDF', xlab = "x", ylab="f(x)")
s <-seq(6,7,0.01)
polygon(c(6,s,7), c(0,f(x),0), col="lightblue")
s <-seq(6,7,0.01)
polygon(c(6,s,7), c(0,f(x),0), col="lightblue")
x <- seq(6,10,length = 100 )
y1 <- dnorm(x, mu_x_bar,sigma_x_bar) #calculate density
plot(x, y1, type = 'l',col='black', main='PDF', xlab = "x", ylab="f(x)")
f<-function(x){dnorm(x,1.9,0.5)}
plot(f,0,4,xlab="x-axis",ylab="density f(x)")
x<-seq(0,1.4,0.01)
polygon(c(0,x,1.4), c(0,f(x),0), col="lightblue")
s <-seq(6,7,0.01)
polygon(c(6,s,7), c(0,f(x),0), col="lightblue")
s <- seq(6,7,0.01)
polygon(c(6,s,7), c(0,f(x),0), col="lightblue")
#Shade area under curve
s <- seq(6,7,0.01)
polygon(c(6,x,7), c(0,f(x),0), col="lightblue")
x <- seq(6,10,length = 100 )
y1 <- dnorm(x, mu_x_bar,sigma_x_bar) #calculate density
s <- seq(6,7,0.01)
polygon(c(6,x,7), c(0,f(x),0), col="lightblue")
x <- seq(6,10,length = 100 )
y1 <- dnorm(x, mu_x_bar,sigma_x_bar) #calculate density
plot(x, y1, type = 'l',col='black', main='PDF', xlab = "x", ylab="f(x)")
s <- seq(6,7,0.01)
polygon(c(6,x,7), c(0,f(x),0), col="lightblue")
f<-function(x){dnorm(x,1.9,0.5)}
plot(f,0,4,xlab="x-axis",ylab="density f(x)")
f<-function(x){dnorm(x,8,0.5)}
plot(f,4,10,xlab="x-axis",ylab="density f(x)")
f<-function(x){dnorm(x,8,0.5)}
plot(f,6,10,xlab="x-axis",ylab="density f(x)")
s <- seq(6,7,0.01)
polygon(c(6,x,7), c(0,f(x),0), col="lightblue")
s <- seq(6,7,0.01)
polygon(c(6,s,7), c(0,f(x),0), col="lightblue")
f<-function(x){dnorm(x,8,0.5)}
plot(f,6,10,main="PDF", xlab="x-axis",ylab="density f(x)")
polygon(c(6,s,7), c(0,f(x),0), col="lightblue")
s <- seq(6,7,0.01)
s <- seq(6,7,0.01)
polygon(c(6,s,7), c(0,f(s),0), col="lightblue")
pnorm(7, 8, .5)
7-8
/.5
-1/.5
f<-function(x){dnorm(x,0,1)}
plot(f,-3,3,main="PDF", xlab="x-axis",ylab="density f(x)")
Z <- (norm_pop - mu_x_bar)/ sigma_x_bar
y2 <-dnorm(x, 0, 1)
lines(x, y2, col='green')
plot(x, y1, type = 'l',col='black', main='PDF', xlab = "x", ylab="f(x)")
Z <- (norm_pop - mu_x_bar)/ sigma_x_bar
y2 <-dnorm(x, 0, 1)
lines(x, y2, col='green')
f<-function(x){dnorm(x,0,1)}
plot(f,-3,3,main="PDF", xlab="x-axis",ylab="density f(x)")
s <- seq(2,3,0.01)
polygon(c(2,s,3), c(0,f(s),0), col="lightblue")
1-pnorm(2,0,1)
f<-function(x){dnorm(x,0,1)}
plot(f,-3,3,main="PDF of Z", xlab="x-axis",ylab="density f(x)")
s <- seq(2,3,0.01)
polygon(c(2,s,3), c(0,f(s),0), col="lightblue")
1-pnorm(2,0,1)
.877-.5
install.packages("TeachingDemos")
library(TeachingDemos)
plot(dice(12,1))
source("http://www.bioconductor.org/biocLite.R")
biocLite()
biocLite("ALL")
library(ALL)
data(ALL)
#get Golub data for example
library(multtest)
data(golub)
install.packages("multtest")
# installing/loading the package:
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
updateR(F, T, T, F, T, F, T) # install, move, update.package, quit R.
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
updateR(F, T, T, F, T, F, T) # install, move, update.package, quit R.
inspect(docs[2]) #test and inspect a document
library(akmeans)
#install.packages("akmeans") #install kmeans in R
# attach packages to workspace
library(akmeans)
library(lsa)
library(cluster)
library(vegan)
library(ggvis)
library(akmeans)
cname <- file.path("C:", "/RData/50Articles")
#cname <- ("~", "Desktop", "10Magainzes)
#Use if on MAC^
dir(cname)
#Load the package for text mining and load texts
library(tm)
docs <- Corpus(DirSource(cname))
summary(docs)
inspect(docs[2]) #test and inspect a document
library(SnowballC)
#the following code edits the data and removes excess information
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, tolower)
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, stemDocument)
docs <- tm_map(docs, stripWhitespace)
docs <- tm_map(docs, PlainTextDocument)
inspect(docs[2]) #test
#Now Create Matrix
dtm <- DocumentTermMatrix(docs)
m <- as.matrix(dtm)
write.csv(m,file="dtmKMeans.csv")
#Transpose of dtm
tdm <- TermDocumentMatrix(docs)
tdm
normalized_dtm <- quick.norm(dtm,1) #normalize matrix, sum = 1
##EUCLIDEAN MATRIX
stdEuc <- dist((1/normalized_dtm)*(dtm)) #standardize Euclidean Distance
euc <- as.matrix(stdEucl)
euc.sort <- sort(euc, decreasing=TRUE)
kfit <- kmeans(stdEuc, 3, nstart=100)
clusplot(euc, kfit$cluster, color=T, shade=T, labels=1, lines=0)
wss = kmeans(euc, centers=1)$tot.withinss
for (i in 2:15)
wss[i] = kmeans(euc, centers=i)$tot.withins
plot(1:15, wss, type='b', xlab="Number of Clusters",
ylab="Within groups sum of squares")
##COSINE MATRIX
cosSim <- cosine(as.matrix(tdm))# Cosine similarity b/w each pair of rows
cos <- as.matrix(cosSim)
cos.sort <- sort(cos, decreasing=TRUE)
kfit <- kmeans(cosSim, 3, nstart=100)
clusplot(cos, kfit$cluster, color=T, shade=T, labels=1, lines=0)
wss = kmeans(cos, centers=1)$tot.withinss
for (i in 2:15)
wss[i] = kmeans(cos, centers=i)$tot.withins
plot(1:15, wss, type='b', xlab="Number of Clusters",
ylab="Within groups sum of squares")
##JACCARD MATRIX
binary.dm <- as.matrix(dtm)
binary.dm[binary.dm > 1] <- 1
jacc.mat <- vegdist(binary.dm, method = "jaccard")
jacc <- as.matrix(jacc.mat)
jacc.sort <- sort(jacc, decreasing=TRUE)
kfit <- kmeans(jacc.mat, 3, nstart=100)
clusplot(jacc, kfit$cluster, color=T, shade=T, labels=1, lines=0)
wss = kmeans(jacc, centers=1)$tot.withinss
for (i in 2:15)
wss[i] = kmeans(jacc, centers=i)$tot.withins
plot(1:15, wss, type='b', xlab="Number of Clusters",
ylab="Within groups sum of squares")
euc <- as.matrix(stdEucl)
#install.packages("akmeans") #install kmeans in R
# attach packages to workspace
library(akmeans)
library(lsa)
library(cluster)
library(vegan)
library(ggvis)
library(akmeans)
cname <- file.path("C:", "/RData/50Articles")
#cname <- ("~", "Desktop", "10Magainzes)
#Use if on MAC^
dir(cname)
#Load the package for text mining and load texts
library(tm)
docs <- Corpus(DirSource(cname))
summary(docs)
inspect(docs[2]) #test and inspect a document
library(SnowballC)
#the following code edits the data and removes excess information
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, tolower)
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, stemDocument)
docs <- tm_map(docs, stripWhitespace)
docs <- tm_map(docs, PlainTextDocument)
inspect(docs[2]) #test
#Now Create Matrix
dtm <- DocumentTermMatrix(docs)
m <- as.matrix(dtm)
write.csv(m,file="dtmKMeans.csv")
#Transpose of dtm
tdm <- TermDocumentMatrix(docs)
tdm
normalized_dtm <- quick.norm(dtm,1) #normalize matrix, sum = 1
##EUCLIDEAN MATRIX
stdEuc <- dist((1/normalized_dtm)*(dtm)) #standardize Euclidean Distance
euc <- as.matrix(stdEucl)
euc.sort <- sort(euc, decreasing=TRUE)
kfit <- kmeans(stdEuc, 3, nstart=100)
clusplot(euc, kfit$cluster, color=T, shade=T, labels=1, lines=0)
install.packages("Rcmdr")
rm(list=ls())
?abline
library("ALL")
library(multtest)
data(ALL)
data(golub) #dataset
data(golub, package="multtest")
clustal_data <- data.frame(golub[1042,],golub[2124,])
colnames(clustal_data)<-c("CCND3 CYCLIN D3","ZYXIN")
par(mfrow=c(1,2))
gol.fac <- factor(golub.cl,levels=0:1, labels= c("ALL","AML"))
plot(clustal_data, pch=as.numeric(gol.fac),
main="Plot of gene CCND3 Cyclin D3 and Zyxin expressions for ALL and AML patients",
col = c("green","blue")[as.numeric(gol.fac)])
legend("topright",legend=c("ALL","AML"),pch=1:2)
plot(hclust(dist(clustal_data,method="euclidian"),method="single"), main="Single linkage cluster
diagram from gene CCND3 Cyclin D3 and Zyxin expressions")
data(golub, package="multtest")
data <- data.frame(golub[1042,],golub[2124,])
colnames(data)<-c("CCND3 Cyclin D3","Zyxin")
clusterC <- kmeans(data, 2,nstart = 10)
clusterC
plot(data2, col = clusterC$cluster)
plot(data, col = clusterC$cluster)
points(clusterC$centers, col = 1:2, pch = 8, cex=2)
data1 <- rbind(matrix(rnorm(100,0,0.5), ncol = 2),
+ matrix(rnorm(100,2,0.5), ncol = 2))
clusterA <- kmeans(data1,2)
#K-means clustering with 2 cluster of sizes 75, 75
data2 <- rbind(matrix(rnorm(100,0,0.75), ncol = 2),
+ matrix(rnorm(100,2,0.75), ncol = 2))
clusterB <- kmeans(data2,2)
#the output of k-means cluster analysis is assigned to a list called c1
par(mfrow=c(3,1))
plot(data1, col = clusterA$cluster, main = "Size 50")
points(clusterA$centers, col = 1:2, pch = 8, cex=2)
plot(data2, col = clusterB$cluster,  main = "Size 75")
points(clusterB$centers, col = 1:2, pch = 8, cex=2)
#We can use a bootstrap to estimate 95% confidence intervals around cluster means.
#The idea is to resample with replacement fro the given sample 1000 times
#with replacement and to compute quantiles for the corresponding confidence intervals
#
init <- matrix(c(0,0,2,2), nrow = 2, ncol=2, byrow=TRUE)
cA <- kmeans(data1, init, nstart = 10)
cB <- kmeans(data2, init, nstart = 10)
n <- 100; n_boot<-1000
boot.cA <- matrix(0,nrow=n_boot,ncol = 4)
boot.cB<- matrix(0,nrow=n_boot,ncol = 4)
for (i in 1:n_boot){
dat.star <- data1[sample(1:n,replace=TRUE),]
cA <- kmeans(dat.star, init, nstart = 10)
boot.cA[i,] <- c(cA$centers[1,],cA$centers[2,])
}
quantile(boot.cA[,1],c(0.025,0.975))
quantile(boot.cA[,2],c(0.025,0.975))
quantile(boot.cA[,3],c(0.025,0.975))
quantile(boot.cA[,4],c(0.025,0.975))
for (i in 1:n_boot){
dat.star <- data2[sample(1:n,replace=TRUE),]
cB <- kmeans(dat.star, init, nstart = 10)
boot.cB[i,] <- c(cB$centers[1,],cB$centers[2,])
}
quantile(boot.cB[,1],c(0.025,0.975))
quantile(boot.cB[,2],c(0.025,0.975))
quantile(boot.cB[,3],c(0.025,0.975))
quantile(boot.cB[,4],c(0.025,0.975))
########################### PART II ###############################################3
#Above analysis we found that the expr values of the genes "CCND3 Cyclin D3" and "Zyxin"
#are closely related to the distinction b/w ALL and AML.
#Hence a 2-means cluster analysis of the gene expr values are appropriate here
#K-means clustering with 2 clusters of size 11, 27:
data(golub, package="multtest")
data <- data.frame(golub[1042,],golub[2124,])
colnames(data)<-c("CCND3 Cyclin D3","Zyxin")
clusterC <- kmeans(data, 2,nstart = 10)
clusterC
plot(data, col = clusterC$cluster)
points(clusterC$centers, col = 1:2, pch = 8, cex=2)
par(mfrow=c(1,2))
plot(data1, col = clusterA$cluster, main = "Size 50")
points(clusterA$centers, col = 1:2, pch = 8, cex=2)
plot(data2, col = clusterB$cluster,  main = "Size 75")
points(clusterB$centers, col = 1:2, pch = 8, cex=2)
#W
plot(data, col = clusterC$cluster)
points(clusterC$centers, col = 1:2, pch = 8, cex=2)
plot(data, col = clusterC$cluster,
main="Cluster Analysis on CCND3 Cyclin D3 and Zyxin, ALL(red) AML(black)",
col =c("black,red"))
par(mfrow=c(1,2))
plot(data1, col = clusterA$cluster, main = "Size 50")
points(clusterA$centers, col = 1:2, pch = 8, cex=2)
plot(data, col = clusterC$cluster,
main="Cluster Analysis on CCND3 Cyclin D3 and Zyxin, ALL() AML(black)",
col = c("black,red"))
points(clusterC$centers, col = 1:2, pch = 8, cex=2)
data(golub, package="multtest")
data <- data.frame(golub[1042,],golub[2124,])
colnames(data)<-c("CCND3 Cyclin D3","Zyxin")
clusterC <- kmeans(data, 2,nstart = 10)
clusterC
plot(data, col = clusterC$cluster,
main="Cluster Analysis on CCND3 Cyclin D3 and Zyxin, ALL() AML(black)")
points(clusterC$centers, col = 1:2, pch = 8, cex=2)
par(mfrow=c(1,2))
plot(data1, col = clusterA$cluster, main = "Size 50")
points(clusterA$centers, col = 1:2, pch = 8, cex=2)
plot(data, col = clusterC$cluster,
main="Cluster Analysis on CCND3 Cyclin D3 and Zyxin, ALL() AML(black)")
points(clusterC$centers, col = 1:2, pch = 8, cex=2)
#the output of k-means cluster analysis is assigned to a list called c1
par(mfrow=c(1,2))
plot(data1, col = clusterA$cluster, main = "Size 50")
points(clusterA$centers, col = 1:2, pch = 8, cex=2)
plot(data2, col = clusterB$cluster,  main = "Size 75")
points(clusterB$centers, col = 1:2, pch = 8, cex=2)
plot(data, col = clusterC$cluster,
main="Cluster Analysis on CCND3 Cyclin D3 and Zyxin, ALL() AML(black)")
points(clusterC$centers, col = 1:2, pch = 8, cex=2)
plot(data, col = clusterC$cluster,
main="Cluster Analysis on CCND3 Cyclin D3 and Zyxin, ALL(black) AML(red)")
points(clusterC$centers, col = 1:2, pch = 8, cex=2)
data(golub, package="multtest")
data <- data.frame(golub[1042,],golub[2124,])
colnames(data)<-c("CCND3 Cyclin D3","Zyxin")
clusterC <- kmeans(data, 2,nstart = 10)
clusterC
plot(data, col = clusterC$cluster,
main="Cluster Analysis on CCND3 Cyclin D3 and Zyxin, ALL(black) AML(red)")
points(clusterC$centers, col = 1:2, pch = 8, cex=2)
plot(data, col = clusterC$cluster,
main="Cluster Analysis on CCND3 Cyclin D3 and Zyxin,ALL(black) AML(red)")
points(clusterC$centers, col = 1:2, pch = 8, cex=2)
par(mfrow=c(1,2))
plot(data1, col = clusterA$cluster, main = "Size 50")
points(clusterA$centers, col = 1:2, pch = 8, cex=2)
plot(data2, col = clusterB$cluster,  main = "Size 75")
points(clusterB$centers, col = 1:2, pch = 8, cex=2)
data(golub, package="multtest")
data <- data.frame(golub[1042,],golub[2124,])
colnames(data)<-c("CCND3 Cyclin D3","Zyxin")
clusterC <- kmeans(data, 2,nstart = 10)
clusterC
plot(data, col = clusterC$cluster,
main="Cluster Analysis on CCND3 Cyclin D3 and Zyxin,ALL(black) AML(red)")
points(clusterC$centers, col = 1:2, pch = 8, cex=2)
library("ALL")
library(multtest)
data(ALL)
data(golub) #dataset
data(golub, package="multtest")
data(golub, package="multtest")
data <- data.frame(golub[1042,],golub[2124,])
colnames(data)<-c("CCND3 Cyclin D3","Zyxin")
clusterC <- kmeans(data, 2,nstart = 10)
clusterC
plot(data, col = clusterC$cluster,
main="Cluster Analysis on CCND3 Cyclin D3 and Zyxin,ALL(black) AML(red)")
points(clusterC$centers, col = 1:2, pch = 8, cex=2)
library(bio3d)
biocLite("muscle")
source("https://bioconductor.org/biocLite.R")
biocLite("muscle")
pdb <- read.pdb("1ubq")
pdb #quick summary
attributes(pdb)
head(pdb$helix)
head(pdb$atom)
plot.bio3d(pdb$atom$b[pdb$calpha], sse=pdb, typ="l", ylab="B-factor")
dim(pdb$xyz)
pdb$xyz
ca.inds <- atom.select(pdb, "calpha")
ca.inds
head( pdb$atom[ca.inds$atom, ] )
aa3 <- pdb$atom$resid[ atom.select(pdb, "calpha")$atom ]
head(aa3)
cab.inds <- atom.select(pdb, elety=c("CA","CB"), chain="A", resno=10:20)
head( pdbseq(pdb) )
pdb1 <- read.pdb("4xof")
pdb1 <- read.pdb("1yiw")
pdb1 <- read.pdb("1yiw")
bs <- binding.site(pdb1)
print(bs$resnames)
pdb <- read.pdb("1yiw")
plot.bio3d(pdb$atom$b[pdb$calpha], sse=pdb, typ="l", ylab="B-factor")
bs <- binding.site(pdb)
print(bs$resnames)
pdb <- read.pdb("1yiw")
plot.bio3d(pdb$atom$b[pdb$calpha], sse=pdb, typ="l", ylab="B-factor")
plot.bio3d(pdb$atom$b[pdb$calpha], sse=pdb, typ="l", ylab="B-factor")
print(bs$resnames)
bs <- binding.site(pdb)
print(bs$resnames)
pdb <- read.pdb("2n2k", multi=TRUE)
pdb$xyz
ca.inds <- atom.select(pdb, "calpha")
pdb$xyz[1:5, ca.inds$xyz]
gs  <- geostas(pdb)
gs  <- geostas(pdb)
domain.inds <- gs$inds[[1]]
xyz <- pdbfit(pdb, inds=domain.inds)
write.pdb(pdb, xyz=xyz, chain=gs$atomgrps, file="1d1d_fit-domain1.pdb")
plot(gs, contour=FALSE)
pdb <- read.pdb("1ubq")
aa3 <- pdb$atom$resid[ atom.select(pdb, "calpha")$atom ]
head(aa3)
aa321(aa3)
head( pdbseq(pdb) )
setwd("~/Documents/BINF Research")
setwd("~/3162-16/Project")
setwd("~/Documents/BINF Research")
